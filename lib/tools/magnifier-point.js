// Generated by CoffeeScript 1.7.1
(function() {
  var MagnifierPointTool, Tool,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tool = ((typeof window !== "undefined" && window !== null ? window.MarkingSurface : void 0) || require('marking-surface')).Tool;

  MagnifierPointTool = (function(_super) {
    __extends(MagnifierPointTool, _super);

    MagnifierPointTool.prototype.selectedRadius = 40;

    MagnifierPointTool.prototype.deselectedRadius = 8;

    MagnifierPointTool.prototype.strokeWidth = 1;

    MagnifierPointTool.prototype.crosshairsSpan = 4 / 5;

    MagnifierPointTool.prototype.href = '';

    MagnifierPointTool.prototype.zoom = 2;

    MagnifierPointTool.prototype.startOffset = null;

    function MagnifierPointTool() {
      var clipID;
      MagnifierPointTool.__super__.constructor.apply(this, arguments);
      clipID = 'marking-surface-magnifier-clip-' + Math.random().toString().split('.')[1];
      this.clip = this.addShape('clipPath', {
        id: clipID
      });
      this.clipCircle = this.clip.addShape('circle');
      this.image = this.addShape('image', {
        clipPath: "url(#" + clipID + ")"
      });
      this.crosshairs = this.addShape('path.crosshairs', {
        stroke: 'currentColor'
      });
      this.disc = this.addShape('circle.disc', {
        fill: 'transparent',
        stroke: 'currentColor'
      });
      this.addEvent('marking-surface:element:start', 'circle', this.onStart);
      this.addEvent('marking-surface:element:move', 'circle', this.onMove);
      setTimeout((function(_this) {
        return function() {
          _this.href || (_this.href = _this.markingSurface.el.querySelector('image').href.baseVal);
          return _this.image.attr({
            'xlink:href': _this.href
          });
        };
      })(this));
    }

    MagnifierPointTool.prototype.onInitialStart = function(e) {
      var x, y, _ref;
      _ref = this.coords(e), x = _ref.x, y = _ref.y;
      this.mark.x = x;
      this.mark.y = y;
      this.onStart.apply(this, arguments);
      return this.onInitialMove.apply(this, arguments);
    };

    MagnifierPointTool.prototype.onInitialMove = function() {
      return this.onMove.apply(this, arguments);
    };

    MagnifierPointTool.prototype.onStart = function(e) {
      var x, y, _ref;
      _ref = this.coords(e), x = _ref.x, y = _ref.y;
      return this.startOffset = {
        x: x - this.mark.x,
        y: y - this.mark.y
      };
    };

    MagnifierPointTool.prototype.onMove = function(e) {
      var x, y, _ref;
      _ref = this.coords(e), x = _ref.x, y = _ref.y;
      x -= this.startOffset.x;
      y -= this.startOffset.y;
      return this.mark.set({
        x: x,
        y: y
      });
    };

    MagnifierPointTool.prototype.select = function() {
      MagnifierPointTool.__super__.select.apply(this, arguments);
      return this.render();
    };

    MagnifierPointTool.prototype.deselect = function() {
      MagnifierPointTool.__super__.deselect.apply(this, arguments);
      return this.render();
    };

    MagnifierPointTool.prototype.render = function() {
      var currentRadius, height, scale, scaledRadius, scaledStrokeWidth, width, _ref, _ref1, _ref2;
      MagnifierPointTool.__super__.render.apply(this, arguments);
      currentRadius = this.markingSurface.selection === this ? this.selectedRadius : this.deselectedRadius;
      scale = (((_ref = this.markingSurface) != null ? _ref.scaleX : void 0) + ((_ref1 = this.markingSurface) != null ? _ref1.scaleY : void 0)) / 2;
      scaledRadius = currentRadius / scale;
      scaledStrokeWidth = this.strokeWidth / scale;
      width = this.markingSurface.el.offsetWidth / scale;
      height = this.markingSurface.el.offsetHeight / scale;
      this.clipCircle.attr({
        transform: "translate(" + (this.mark.x * this.zoom) + ", " + (this.mark.y * this.zoom) + ")",
        r: scaledRadius
      });
      this.image.attr({
        width: width * this.zoom,
        height: height * this.zoom,
        transform: "translate(" + (-1 * this.mark.x * this.zoom) + ", " + (-1 * this.mark.y * this.zoom) + ")"
      });
      this.crosshairs.attr({
        strokeWidth: scaledStrokeWidth * this.strokeWidth,
        d: "M " + (-scaledRadius * this.crosshairsSpan) + " 0 L " + (scaledRadius * this.crosshairsSpan) + " 0\nM 0 " + (-scaledRadius * this.crosshairsSpan) + " L 0 " + (scaledRadius * this.crosshairsSpan)
      });
      this.disc.attr({
        r: scaledRadius,
        strokeWidth: scaledStrokeWidth
      });
      this.attr('transform', "translate(" + this.mark.x + ", " + this.mark.y + ")");
      return (_ref2 = this.controls) != null ? _ref2.moveTo.apply(_ref2, this.getControlsPosition()) : void 0;
    };

    MagnifierPointTool.prototype.getControlsPosition = function() {
      return [this.mark.x, this.mark.y];
    };

    return MagnifierPointTool;

  })(Tool);

  if (typeof window !== "undefined" && window !== null) {
    window.MarkingSurface.MagnifierPointTool = MagnifierPointTool;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = MagnifierPointTool;
  }

}).call(this);
