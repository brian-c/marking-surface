// Generated by CoffeeScript 1.7.1
(function() {
  var MagnifierPointTool, Tool,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tool = ((typeof window !== "undefined" && window !== null ? window.MarkingSurface : void 0) || require('marking-surface')).Tool;

  MagnifierPointTool = (function(_super) {
    __extends(MagnifierPointTool, _super);

    MagnifierPointTool.prototype.selectedRadius = MagnifierPointTool.mobile ? 60 : 40;

    MagnifierPointTool.prototype.deselectedRadius = MagnifierPointTool.mobile ? 20 : 10;

    MagnifierPointTool.prototype.strokeWidth = 2;

    MagnifierPointTool.prototype.crosshairsWidth = 1;

    MagnifierPointTool.prototype.crosshairsGap = 0.1;

    MagnifierPointTool.prototype.closeButtonRadius = MagnifierPointTool.mobile ? 15 : 7;

    MagnifierPointTool.prototype.tag = 'g.magnifier-point-tool';

    MagnifierPointTool.prototype.href = '';

    MagnifierPointTool.prototype.zoom = 2;

    MagnifierPointTool.prototype.startOffset = null;

    function MagnifierPointTool() {
      var clipID;
      MagnifierPointTool.__super__.constructor.apply(this, arguments);
      clipID = 'marking-surface-magnifier-clip-' + Math.random().toString().split('.')[1];
      this.clip = this.addShape('clipPath', {
        id: clipID
      });
      this.clipCircle = this.clip.addShape('circle');
      this.image = this.addShape('image', {
        clipPath: "url(#" + clipID + ")"
      });
      this.crosshairs = this.addShape('path.crosshairs', {
        stroke: 'currentColor',
        transform: 'translate(-0.5, -0.5)'
      });
      this.disc = this.addShape('circle.disc', {
        fill: 'transparent',
        stroke: 'currentColor'
      });
      this.disc.addEvent('marking-surface:element:start', [this, 'onStart']);
      this.disc.addEvent('marking-surface:element:move', [this, 'onMove']);
      this.disc.addEvent('marking-surface:element:release', [this, 'onRelease']);
      this.closeButtonGroup = this.addShape('g.close-button');
      this.closeButton = this.closeButtonGroup.addShape('circle', {
        fill: 'black',
        stroke: 'currentColor'
      });
      this.closeCross = this.closeButtonGroup.addShape('path', {
        fill: 'none',
        stroke: 'white',
        transform: 'rotate(-45)'
      });
      this.closeButtonGroup.addEvent('click', [this.mark, 'destroy']);
      setTimeout((function(_this) {
        return function() {
          _this.href || (_this.href = _this.markingSurface.el.querySelector('image').href.baseVal);
          return _this.image.attr({
            'xlink:href': _this.href
          });
        };
      })(this));
    }

    MagnifierPointTool.prototype.onInitialStart = function(e) {
      var x, y, _ref;
      MagnifierPointTool.__super__.onInitialStart.apply(this, arguments);
      _ref = this.coords(e), x = _ref.x, y = _ref.y;
      this.mark.x = x;
      this.mark.y = y;
      this.onStart.apply(this, arguments);
      return this.onInitialMove.apply(this, arguments);
    };

    MagnifierPointTool.prototype.onInitialMove = function() {
      MagnifierPointTool.__super__.onInitialMove.apply(this, arguments);
      return this.onMove.apply(this, arguments);
    };

    MagnifierPointTool.prototype.onInitialRelease = function() {
      MagnifierPointTool.__super__.onInitialRelease.apply(this, arguments);
      return this.onRelease.apply(this, arguments);
    };

    MagnifierPointTool.prototype.onStart = function(e) {
      var x, y, _ref;
      _ref = this.coords(e), x = _ref.x, y = _ref.y;
      this.startOffset = {
        x: x - this.mark.x,
        y: y - this.mark.y
      };
      return this.attr('data-active', true);
    };

    MagnifierPointTool.prototype.onMove = function(e) {
      var x, y, _ref;
      _ref = this.coords(e), x = _ref.x, y = _ref.y;
      x -= this.startOffset.x;
      y -= this.startOffset.y;
      return this.mark.set({
        x: x,
        y: y
      });
    };

    MagnifierPointTool.prototype.onRelease = function() {
      return this.attr('data-active', null);
    };

    MagnifierPointTool.prototype.select = function() {
      MagnifierPointTool.__super__.select.apply(this, arguments);
      return this.render();
    };

    MagnifierPointTool.prototype.deselect = function() {
      MagnifierPointTool.__super__.deselect.apply(this, arguments);
      return this.render();
    };

    MagnifierPointTool.prototype.render = function() {
      var currentRadius, height, isSelected, radiusAt45Deg, scale, scaledCloseButtonRadius, scaledCrosshairsWidth, scaledRadius, scaledStrokeWidth, width, _ref, _ref1, _ref2, _ref3, _ref4;
      MagnifierPointTool.__super__.render.apply(this, arguments);
      isSelected = this.markingSurface.selection === this;
      currentRadius = isSelected ? this.selectedRadius : this.deselectedRadius;
      scale = (((_ref = this.markingSurface) != null ? _ref.scaleX : void 0) + ((_ref1 = this.markingSurface) != null ? _ref1.scaleY : void 0)) / 2;
      scaledRadius = currentRadius / scale;
      scaledStrokeWidth = this.strokeWidth / scale;
      scaledCrosshairsWidth = this.crosshairsWidth / scale;
      scaledCloseButtonRadius = this.closeButtonRadius / scale;
      width = this.markingSurface.el.offsetWidth / ((_ref2 = this.markingSurface) != null ? _ref2.scaleX : void 0);
      height = this.markingSurface.el.offsetHeight / ((_ref3 = this.markingSurface) != null ? _ref3.scaleY : void 0);
      if ((this.mark.x != null) && (this.mark.y != null)) {
        this.clipCircle.attr({
          transform: "translate(" + (this.mark.x * this.zoom) + ", " + (this.mark.y * this.zoom) + ")",
          r: scaledRadius
        });
        window.img = this.image;
        this.image.attr({
          transform: "translate(" + (-1 * this.mark.x * this.zoom) + ", " + (-1 * this.mark.y * this.zoom) + ")",
          width: width * this.zoom,
          height: height * this.zoom,
          opacity: isSelected ? 1 : 0
        });
        this.crosshairs.attr({
          strokeWidth: scaledCrosshairsWidth,
          d: "M " + (-scaledRadius) + " 0 L " + (-1 * scaledRadius * this.crosshairsGap) + " 0\nM " + (scaledRadius * this.crosshairsGap) + " 0 L " + scaledRadius + " 0\nM 0 " + (-scaledRadius) + " L 0 " + (-1 * scaledRadius * this.crosshairsGap) + "\nM 0 " + (scaledRadius * this.crosshairsGap) + " L 0 " + scaledRadius
        });
        this.disc.attr({
          r: scaledRadius,
          strokeWidth: scaledStrokeWidth
        });
        radiusAt45Deg = scaledRadius * Math.sin(45 / (180 / Math.PI));
        this.closeButtonGroup.attr({
          transform: "translate(" + radiusAt45Deg + ", " + (-1 * radiusAt45Deg) + ")"
        });
        this.closeButton.attr({
          r: scaledCloseButtonRadius,
          strokeWidth: scaledStrokeWidth
        });
        this.closeCross.attr({
          strokeWidth: scaledStrokeWidth,
          d: "M " + (-0.7 * scaledCloseButtonRadius) + " 0 L " + (0.7 * scaledCloseButtonRadius) + " 0\nM 0 " + (-0.7 * scaledCloseButtonRadius) + " L 0 " + (0.7 * scaledCloseButtonRadius)
        });
        this.attr('transform', "translate(" + this.mark.x + ", " + this.mark.y + ")");
        return (_ref4 = this.controls) != null ? _ref4.moveTo.apply(_ref4, this.getControlsPosition()) : void 0;
      }
    };

    MagnifierPointTool.prototype.getControlsPosition = function() {
      return [this.mark.x, this.mark.y];
    };

    return MagnifierPointTool;

  })(Tool);

  MarkingSurface.insertStyle('marking-surface-magnifier-point-tool-default-style', '.magnifier-point-tool {\n  cursor: move;\n  cursor: -moz-grab;\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n.magnifier-point-tool[data-active] {\n  cursor: move;\n  cursor: -moz-grabbing;\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n.magnifier-point-tool .close-button {\n  cursor: pointer;\n}\n\n.magnifier-point-tool:not([data-selected]) .close-button {\n  display: none\n}');

  if (typeof window !== "undefined" && window !== null) {
    window.MarkingSurface.MagnifierPointTool = MagnifierPointTool;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = MagnifierPointTool;
  }

}).call(this);
